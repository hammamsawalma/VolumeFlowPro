// @version=6
indicator("Volume Pattern Indicator - Telegram", shorttitle="Vol-Pat-TG", overlay=true)

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// VOLUME HEATMAP SETTINGS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

g_vol = "Volume Heatmap Settings"
vol_ma_len = input.int(610, title="Volume MA Length", group=g_vol)
vol_std_len = input.int(610, title="Volume Stdev Length", group=g_vol)

g_vol_thresh = "Volume Thresholds"
vol_thresh_extra_high = input.float(4.0, title="Extra High Multiplier", group=g_vol_thresh)
vol_thresh_high = input.float(2.5, title="High Multiplier", group=g_vol_thresh)
vol_thresh_medium = input.float(1.0, title="Medium Multiplier", group=g_vol_thresh)

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ALERT SETTINGS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

g_alert = "Alert Settings"
enable_alerts = input.bool(true, title="Enable Alerts", group=g_alert)

// Telegram Settings
g_telegram = "Telegram Settings"
enable_telegram = input.bool(true, title="Enable Telegram Alerts", group=g_telegram)
telegram_chat_id = input.string("-1002517049323", title="Telegram Chat ID", group=g_telegram)
use_telegram_formatting = input.bool(true, title="Use Telegram Formatting (JSON)", group=g_telegram, tooltip="Format messages as JSON for direct Telegram API compatibility")

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// PATTERN SETTINGS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

g_pattern = "BUY Pattern Settings"
red2_body_ratio_threshold = input.float(0.61, title="Red2 Body Ratio Threshold", group=g_pattern, tooltip="Minimum body ratio for second red candle (body size / total candle length)")

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// BASIC PATTERN SETTINGS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

g_basic_pattern = "Basic BUY Pattern Settings"
enable_basic_pattern = input.bool(false, title="Enable Basic BUY Pattern", group=g_basic_pattern, tooltip="Show 2 red candles followed by green candle closing above first red (with volume requirement)")

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// SELL PATTERN SETTINGS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

g_sell_pattern = "SELL Pattern Settings"
enable_sell_patterns = input.bool(true, title="Enable SELL Patterns", group=g_sell_pattern, tooltip="Enable detection of SELL patterns (opposite of BUY patterns)")
green2_body_ratio_threshold = input.float(0.61, title="Green2 Body Ratio Threshold", group=g_sell_pattern, tooltip="Minimum body ratio for second green candle (body size / total candle length)")

g_basic_sell_pattern = "Basic SELL Pattern Settings"
enable_basic_sell_pattern = input.bool(false, title="Enable Basic SELL Pattern", group=g_basic_sell_pattern, tooltip="Show 2 green candles followed by red candle closing below first green (with volume requirement)")

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// CALCULATIONS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

// --- Volume Heatmap Calculations ---
safe_vol_ma_len = math.max(1, vol_ma_len)
safe_vol_std_len = math.max(1, vol_std_len)

vol_mean = ta.sma(volume, safe_vol_ma_len)
vol_std = ta.stdev(volume, safe_vol_std_len)
vol_stdbar = vol_std == 0 ? 0 : (volume - vol_mean) / vol_std

// Determine if current candle has significant volume (is "colored")
is_volume_colored = vol_stdbar > vol_thresh_medium

// Determine candle colors
is_red_candle = close < open
is_green_candle = close > open

// --- BUY Pattern Detection ---
// Check previous candles for BUY patterns
red1_is_red = is_red_candle[2]
red1_is_volume_colored = vol_stdbar[2] > vol_thresh_medium
red1_open = open[2]

red2_is_red = is_red_candle[1]
red2_is_volume_colored = vol_stdbar[1] > vol_thresh_medium
red2_open = open[1]

// Calculate second red candle's body ratio
red2_body_size = red2_is_red ? (open[1] - close[1]) : 0
red2_total_length = high[1] - low[1]
red2_body_ratio = red2_total_length > 0 ? red2_body_size / red2_total_length : 0
red2_strong_body = red2_body_ratio >= red2_body_ratio_threshold

current_is_green = is_green_candle
current_is_volume_colored = is_volume_colored
current_close = close

// Primary BUY Pattern conditions
two_consecutive_reds = red1_is_red and red2_is_red
red2_must_have_volume = red2_is_volume_colored
green_with_volume = current_is_green and current_is_volume_colored
green_closes_above_red2_open = current_close > red2_open

// Complete Primary BUY pattern detected (confirmed on bar close)
primary_buy_pattern = two_consecutive_reds and red2_must_have_volume and green_with_volume and green_closes_above_red2_open and red2_strong_body and barstate.isconfirmed

// Basic BUY Pattern conditions
basic_two_consecutive_reds = red1_is_red and red2_is_red
basic_green_closes_above_red1_open = current_close > red1_open
basic_green_with_volume = current_is_green and current_is_volume_colored

// Complete Basic BUY pattern detected (confirmed on bar close)
basic_buy_pattern = enable_basic_pattern and basic_two_consecutive_reds and basic_green_with_volume and basic_green_closes_above_red1_open and barstate.isconfirmed

// --- SELL Pattern Detection ---
// Check previous candles for SELL patterns
green1_is_green = is_green_candle[2]
green1_is_volume_colored = vol_stdbar[2] > vol_thresh_medium
green1_open = open[2]

green2_is_green = is_green_candle[1]
green2_is_volume_colored = vol_stdbar[1] > vol_thresh_medium
green2_open = open[1]

// Calculate second green candle's body ratio
green2_body_size = green2_is_green ? (close[1] - open[1]) : 0
green2_total_length = high[1] - low[1]
green2_body_ratio = green2_total_length > 0 ? green2_body_size / green2_total_length : 0
green2_strong_body = green2_body_ratio >= green2_body_ratio_threshold

current_is_red = is_red_candle

// Primary SELL Pattern conditions
two_consecutive_greens = green1_is_green and green2_is_green
green2_must_have_volume = green2_is_volume_colored
red_with_volume = current_is_red and current_is_volume_colored
red_closes_below_green2_open = current_close < green2_open

// Complete Primary SELL pattern detected (confirmed on bar close)
primary_sell_pattern = enable_sell_patterns and two_consecutive_greens and green2_must_have_volume and red_with_volume and red_closes_below_green2_open and green2_strong_body and barstate.isconfirmed

// Basic SELL Pattern conditions
basic_two_consecutive_greens = green1_is_green and green2_is_green
basic_red_closes_below_green1_open = current_close < green1_open
basic_red_with_volume = current_is_red and current_is_volume_colored

// Complete Basic SELL pattern detected (confirmed on bar close)
basic_sell_pattern = enable_basic_sell_pattern and basic_two_consecutive_greens and basic_red_with_volume and basic_red_closes_below_green1_open and barstate.isconfirmed

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ALERTS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

// Function to get appropriate emoji based on pattern type and direction
get_pattern_emoji(pattern_type, side) =>
    if pattern_type == "Primary"
        if side == "BUY"
            "🟢"  // Green circle for Primary BUY
        else
            "🔴"  // Red circle for Primary SELL
    else  // Basic pattern
        if side == "BUY"
            "🔵"  // Blue circle for Basic BUY
        else
            "🟠"  // Orange circle for Basic SELL

// Function to clean symbol for TradingView link
get_clean_symbol_for_tradingview(raw_symbol) =>
    // Remove .P suffix for perpetual contracts
    clean_symbol = str.replace(raw_symbol, ".P", "")
    // Add BINANCE exchange prefix if no exchange is specified
    final_symbol = str.contains(clean_symbol, ":") ? clean_symbol : "BINANCE:" + clean_symbol
    final_symbol

// Function to create TradingView chart link
get_tradingview_link(symbol) =>
    clean_symbol = get_clean_symbol_for_tradingview(symbol)
    "https://www.tradingview.com/chart/?symbol=" + clean_symbol

// Function to create enhanced Telegram message
create_telegram_message(pattern_type, side, symbol) =>
    if use_telegram_formatting
        // Get appropriate emoji for this pattern
        pattern_emoji = get_pattern_emoji(pattern_type, side)
        
        // Create TradingView chart link
        chart_link = get_tradingview_link(symbol)
        
        // Create enhanced JSON format for Telegram API with themed emojis and chart link
        telegram_text = pattern_emoji + " " + pattern_type + " " + side + "\\n" +
                       "📊 " + symbol + "\\n" +
                       "🕐 " + str.format_time(time, "yyyy-MM-dd HH:mm", "UTC+3") + "\\n" +
                       "📈 <a href=\\\"" + chart_link + "\\\">View Chart</a>"
        
        // Create JSON payload for Telegram with HTML parse mode for clickable links
        json_message = '{"chat_id":"' + telegram_chat_id + '","text":"' + telegram_text + '","parse_mode":"HTML"}'
        json_message
    else
        // Enhanced standard format for regular alerts
        standard_text = pattern_type + " " + side + "\\n" +
                       "Symbol: " + symbol + "\\n" +
                       "Time: " + str.format_time(time, "yyyy-MM-dd HH:mm", "UTC+3") + "\\n" +
                       "Chart: " + get_tradingview_link(symbol)
        standard_text

// Trigger alerts for all pattern types (confirmed on bar close)
if primary_buy_pattern and enable_alerts
    alert_text = create_telegram_message("Primary", "BUY", syminfo.ticker)
    alert(alert_text, alert.freq_once_per_bar_close)

if basic_buy_pattern and enable_alerts
    basic_alert_text = create_telegram_message("Basic", "BUY", syminfo.ticker)
    alert(basic_alert_text, alert.freq_once_per_bar_close)

if primary_sell_pattern and enable_alerts
    sell_alert_text = create_telegram_message("Primary", "SELL", syminfo.ticker)
    alert(sell_alert_text, alert.freq_once_per_bar_close)

if basic_sell_pattern and enable_alerts
    basic_sell_alert_text = create_telegram_message("Basic", "SELL", syminfo.ticker)
    alert(basic_sell_alert_text, alert.freq_once_per_bar_close)

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// VISUAL PLOTS
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

// Color bars based on volume (removed red, keeping only orange and yellow)
bcolor = if vol_stdbar > vol_thresh_high
    color.orange
else if vol_stdbar > vol_thresh_medium
    color.yellow
else
    na
barcolor(bcolor, title="Volume Heatmap Bar Color")

// Plot BUY pattern signals
plotshape(primary_buy_pattern, title="Primary BUY Signal", location=location.belowbar, color=color.lime, style=shape.triangleup, size=size.normal)
plotshape(basic_buy_pattern, title="Basic BUY Signal", location=location.belowbar, color=color.blue, style=shape.circle, size=size.small)

// Plot SELL pattern signals
plotshape(primary_sell_pattern, title="Primary SELL Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.normal)
plotshape(basic_sell_pattern, title="Basic SELL Signal", location=location.abovebar, color=color.orange, style=shape.xcross, size=size.small)

// Add labels for better visualization
if primary_buy_pattern
    label.new(bar_index, low, text="PRIMARY BUY", color=color.lime, textcolor=color.white, style=label.style_label_up, size=size.small)

if basic_buy_pattern
    label.new(bar_index, low * 0.99, text="BASIC BUY", color=color.blue, textcolor=color.white, style=label.style_label_up, size=size.small)

if primary_sell_pattern
    label.new(bar_index, high, text="PRIMARY SELL", color=color.red, textcolor=color.white, style=label.style_label_down, size=size.small)

if basic_sell_pattern
    label.new(bar_index, high * 1.01, text="BASIC SELL", color=color.orange, textcolor=color.white, style=label.style_label_down, size=size.small)

// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// TABLE DISPLAY (OPTIONAL)
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████

// Create a table to show current pattern status
var info_table = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1, frame_color=color.black, frame_width=1)

if barstate.islast
    table.cell(info_table, 0, 0, "Primary BUY", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 0, primary_buy_pattern ? "DETECTED ✓" : "Not Found", text_color=primary_buy_pattern ? color.lime : color.gray, text_size=size.small)

    table.cell(info_table, 0, 1, "Basic BUY", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 1, basic_buy_pattern ? "DETECTED ✓" : (enable_basic_pattern ? "Not Found" : "Disabled"), text_color=basic_buy_pattern ? color.blue : color.gray, text_size=size.small)

    table.cell(info_table, 0, 2, "Primary SELL", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 2, primary_sell_pattern ? "DETECTED ✓" : (enable_sell_patterns ? "Not Found" : "Disabled"), text_color=primary_sell_pattern ? color.red : color.gray, text_size=size.small)

    table.cell(info_table, 0, 3, "Basic SELL", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 3, basic_sell_pattern ? "DETECTED ✓" : (enable_basic_sell_pattern ? "Not Found" : "Disabled"), text_color=basic_sell_pattern ? color.orange : color.gray, text_size=size.small)

    table.cell(info_table, 0, 4, "Current Volume", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 4, str.tostring(vol_stdbar, "#.##") + "σ", text_color=color.black, text_size=size.small)

    table.cell(info_table, 0, 5, "Alerts Status", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 5, enable_alerts ? "Enabled ✓" : "Disabled", text_color=enable_alerts ? color.green : color.red, text_size=size.small)
